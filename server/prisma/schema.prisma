generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INQUILINO
  PROPIETARIO
}

enum Visibility {
  PUBLIC
  MATCHED_ONLY
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  image        String?
  videoUrl     String?
  passwordHash String?
  provider     String   @default("credentials")
  role         Role     @default(INQUILINO)
  plan         String   @default("standard")
  city         String?
  noiseLevel   Int?
  maxDistanceKm Int?
  about        String?
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  properties   Property[]
  apiKeys      ApiKey[]
  roommateLikesA RoommateLike[] @relation("likesA")
  roommateLikesB RoommateLike[] @relation("likesB")
  propertyMatches PropertyMatch[]
}

model Property {
  id           String    @id @default(cuid())
  owner        User      @relation(fields: [ownerId], references: [id])
  ownerId      String
  title        String
  description  String
  city         String?
  priceMonthly Int
  photos       String[]
  visibility   Visibility @default(PUBLIC)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  matches      PropertyMatch[]
}

model RoommateLike {
  id        String  @id @default(cuid())
  userA     User    @relation("likesA", fields: [userAId], references: [id])
  userAId   String
  userB     User    @relation("likesB", fields: [userBId], references: [id])
  userBId   String
  score     Int
  status    MatchStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userAId, userBId])
}

model PropertyMatch {
  id         String  @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  tenant     User     @relation(fields: [tenantId], references: [id])
  tenantId   String
  score      Int
  status     MatchStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, tenantId])
}

model Blog {
  id        String  @id @default(cuid())
  title     String
  content   String
  published Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmtpSetting {
  id        String  @id @default(cuid())
  host      String
  port      Int
  user      String
  fromEmail String
  secure    Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  label      String
  keyHash    String
  active     Boolean @default(true)
  createdAt  DateTime @default(now())
  lastUsedAt DateTime?
}
